[{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the arithmetic mean of the argument, ignoring null consistently","expectations":"the arithmetic mean of a 1-level nested list ignoring null","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338447000","time":"0D00:00:00.000010000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the arithmetic mean of the argument, ignoring null consistently","expectations":"the arithmetic mean of a 2-level nested list ignoring null","line":10,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338495000","time":"0D00:00:00.000009000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the minimum of the argument, ignoring null consistently","expectations":"the minimum of a 1-level nested list ignoring null","line":14,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338550000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the minimum of the argument, ignoring null consistently","expectations":"the minimum of a 2-level nested list ignoring null","line":17,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338591000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the product of the argument, ignoring null consistently","expectations":"the product of a 1-level nested list ignoring null","line":21,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338645000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the product of the argument, ignoring null consistently","expectations":"the product of a 2-level nested list ignoring null","line":24,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338685000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs","fileName":"math.quke","feature":"Support mathematical calculations","block":"Should","description":"return the ratios of consecutive items, with the first ratio being 1","expectations":"the ratios of consecutive items, with the first ratio being 1","line":28,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.338739000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bitsToInteger.quke","feature":"Cast bits to integer.","block":"Should","description":"Cast 8 bits to a byte.","expectations":"0x01 from 8 bits (7#0b),1b","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.272496000","time":"0D00:00:00.000009000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bitsToInteger.quke","feature":"Cast bits to integer.","block":"Should","description":"Cast 16 bits to an short integer.","expectations":"1h from 16 bits (15#0b),1b","line":11,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.272625000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bitsToInteger.quke","feature":"Cast bits to integer.","block":"Should","description":"Cast 32 bits to an int integer.","expectations":"1i from 32 bits (31#0b),1b","line":15,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.272678000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bitsToInteger.quke","feature":"Cast bits to integer.","block":"Should","description":"Cast 64 bits to a long integer.","expectations":"1j from 64 bits (63#0b),1b","line":19,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.272730000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bitsToInteger.quke","feature":"Cast bits to integer.","block":"Should","description":"Throw \"length\" error if the number of bits is not 8/16/32/64.","expectations":"\"length\" error if the number of bytes is 9.","line":23,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.272782000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bitsToInteger.quke","feature":"Cast bits to integer.","block":"Should","description":"Throw \"type\" error if the data type is not bool vector.","expectations":"\"type\" error if the data type is byte vector.","line":27,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.272834000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bytesToInteger.quke","feature":"Cast bytes to integer.","block":"Should","description":"Cast 2 bytes to a short integer.","expectations":"1h from 2 bytes 0x0001","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.276490000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bytesToInteger.quke","feature":"Cast bytes to integer.","block":"Should","description":"Cast 4 bytes to an int integer.","expectations":"1i from 4 bytes 0x00000001","line":11,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.276546000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bytesToInteger.quke","feature":"Cast bytes to integer.","block":"Should","description":"Cast 8 bytes to a long integer.","expectations":"1j from 8 bytes 0x0000000000000001","line":15,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.276598000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bytesToInteger.quke","feature":"Cast bytes to integer.","block":"Should","description":"Throw \"length\" error if the number of bytes is not 2/4/8.","expectations":"\"length\" error if the number of bytes is 3.","line":19,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.276648000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"bytesToInteger.quke","feature":"Cast bytes to integer.","block":"Should","description":"Throw \"type\" error if the data type is not byte vector.","expectations":"\"type\" error if the data type is bool vector.","line":23,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.276701000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBits.quke","feature":"Cast integer to bits.","block":"Should","description":"Cast a byte to 8 bits.","expectations":"(7#0b),1b from .cast.integerToBits 0x01","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.279734000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBits.quke","feature":"Cast integer to bits.","block":"Should","description":"Cast a short integer to 16 bits.","expectations":"(15#0b),1b from .cast.integerToBits 1h","line":11,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.279790000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBits.quke","feature":"Cast integer to bits.","block":"Should","description":"Cast an int integer to 32 bits.","expectations":"(31#0b),1b from .cast.integerToBits 1i","line":15,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.279841000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBits.quke","feature":"Cast integer to bits.","block":"Should","description":"Cast a long integer to 64 bits.","expectations":"(63#0b),1b from .cast.integerToBits 1j","line":19,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.279892000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBytes.quke","feature":"Cast integer to bytes.","block":"Should","description":"Cast a short integer to 2 bytes.","expectations":"0x0001 from .cast.integerToBytes 1h","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.282404000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBytes.quke","feature":"Cast integer to bytes.","block":"Should","description":"Cast an int integer to 4 bytes.","expectations":"0x00000001 from .cast.integerToBytes 1i","line":11,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.282460000","time":"0D00:00:00.000006000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/cast","fileName":"integerToBytes.quke","feature":"Cast integer to bytes.","block":"Should","description":"Cast a long integer to 8 bytes.","expectations":"0x0000000000000001 from .cast.integerToBytes 1j","line":15,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.282512000","time":"0D00:00:00.000005000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/dict","fileName":"argSort.quke","feature":"Keys for ascending sort.","block":"Should","description":"Get keys reordered to sort a dictionary in ascending order.","expectations":"````b`a``` from `.dict.argSort[`a`b!2 1]`.","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.284836000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/dict","fileName":"sortAsc.quke","feature":"Sort dictionary in ascending order of value.","block":"Should","description":"Sort a dictionary in ascending order of value.","expectations":"`b`a!`s#1 2 from .dict.sortAsc[`a`b!2 1].","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.287270000","time":"0D00:00:00.000010000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/file","fileName":"join.quke","feature":"Join directories and file to form a path.","block":"Should","description":"Join directories and file to form a path.","expectations":"`:/hdb/2022.01.01/trade from .file.join[`:/hdb`2022.01.01`trade].","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.289710000","time":"0D00:00:00.000009000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/file","fileName":"split.quke","feature":"Split file path into directory and file parts.","block":"Should","description":"Split file path into directory and file parts.","expectations":"`:/hdb/2022.01.01`trade from .file.split[`:/hdb/2022.01.01/trade].","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.292029000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"deleteAll.quke","feature":"Delete a file, or directory and its files and subdirectories recursively.","block":"Should","description":"Delete a file.","expectations":"The specified file is deleted","line":14,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.297460000","time":"0D00:00:00.000027000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"deleteAll.quke","feature":"Delete a file, or directory and its files and subdirectories recursively.","block":"Should","description":"Delete a directory recursively.","expectations":"The specified directory is deleted","line":19,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.301068000","time":"0D00:00:00.000072000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"isDir.quke","feature":"Check if the argument represents a directory and it exists.","block":"Should","description":"Check if the argument represents a file and it exists.","expectations":"1b for an existent directory.","line":12,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.307994000","time":"0D00:00:00.000017000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"isDir.quke","feature":"Check if the argument represents a directory and it exists.","block":"Should","description":"Check if the argument represents a file and it exists.","expectations":"0b for an existent file.","line":14,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.308049000","time":"0D00:00:00.000009000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"isDir.quke","feature":"Check if the argument represents a directory and it exists.","block":"Should","description":"Check if the argument represents a file and it exists.","expectations":"0b for an non-existent path.","line":16,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.308093000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"isFile.quke","feature":"Check if the argument represents a file and it exists.","block":"Should","description":"Check if the argument represents a file and it exists.","expectations":"1b for an existent file.","line":12,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.314490000","time":"0D00:00:00.000011000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"isFile.quke","feature":"Check if the argument represents a file and it exists.","block":"Should","description":"Check if the argument represents a file and it exists.","expectations":"0b for an existent directory.","line":14,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.314539000","time":"0D00:00:00.000015000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"isFile.quke","feature":"Check if the argument represents a file and it exists.","block":"Should","description":"Check if the argument represents a file and it exists.","expectations":"0b for an non-existent path.","line":16,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.314590000","time":"0D00:00:00.000009000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/io","fileName":"listAll.quke","feature":"List file or directory recursively.","block":"Should","description":"List file or directory recursively.","expectations":"files and subdirectories are listed recursively","line":12,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.320514000","time":"0D00:00:00.000035000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/list","fileName":"argSort.quke","feature":"Indices for ascending sort.","block":"Should","description":"Get indices needed to sort vector in ascending order.","expectations":"`1 0 2` from `.list.argSort[2 1 3]`.","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.324337000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/list","fileName":"repeat.quke","feature":"Repeat.","block":"Should","description":"Repeat keys for the corresponding number of times.","expectations":"`a`b`b from .list.repeat[`a`b!1 2].","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.326701000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/list","fileName":"sortAsc.quke","feature":"Sort vector in ascending order.","block":"Should","description":"Sort a vector in ascending order.","expectations":"`s#1 2 3 from .list.sortAsc[2 1 3].","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.329046000","time":"0D00:00:00.000009000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/math","fileName":"polyCoefficients.quke","feature":"Calculate polynomial coefficients.","block":"Should","description":"Return coefficients under which a polynomial value is obtained at a base value.","expectations":"`20 10 3 17` from `.math.polyCoefficients[20100317; 100]`.","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.332031000","time":"0D00:00:00.000032000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/math","fileName":"polynomial.quke","feature":"Calculate polynomial.","block":"Should","description":"Return a polynomial evaluated at given base under given coefficients.","expectations":"20100317 from .math.polynomial[2010 3 17; 100].","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.335022000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/str","fileName":"split.quke","feature":"String split.","block":"Should","description":"Split a string by a delimiter","expectations":"(\"one\"; \"two\") given the string \"one,two\" and the delimiter \",\".","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.341044000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/str","fileName":"splitByLineBreak.quke","feature":"String split by line break.","block":"Should","description":"Split a string by Linux-style line break","expectations":"(\"one\"; \"two\") given the string \"one\\ntwo\".","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.343494000","time":"0D00:00:00.000008000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/str","fileName":"splitByLineBreak.quke","feature":"String split by line break.","block":"Should","description":"Split a string by Window-style line break","expectations":"(\"one\"; \"two\") given the string \"one\\r\\ntwo\".","line":11,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.343550000","time":"0D00:00:00.000007000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/tbl","fileName":"sortAsc.quke","feature":"Sort table in ascending order of the first non-key column.","block":"Should","description":"Sort a simple table in ascending order of the first non-key column.","expectations":"```([] c1:`p#`a`b; c2:1 2)``` from ```.tbl.sortAsc[([] c1:`b`a; c2:2 1)]```.","line":7,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.346012000","time":"0D00:00:00.000015000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/tbl","fileName":"sortAsc.quke","feature":"Sort table in ascending order of the first non-key column.","block":"Should","description":"Sort a keyed table in ascending order of the first non-key column.","expectations":"```([c1:`b`a] c2:`s#1 2)``` from ```.tbl.sortAsc[([c1:`a`b] c2:2 1)]```.","line":12,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.346077000","time":"0D00:00:00.000010000"},{"namespace":"/mnt/d/Workspaces/fluent-q/specs/tbl","fileName":"sortAsc.quke","feature":"Sort table in ascending order of the first non-key column.","block":"Should","description":"Sort a keyed table in ascending order of the first non-key column.","expectations":"```([c1:`b`a] c2:`s#1 2; c3:10b)``` from ```.tbl.sortAsc[([c1:`a`b] c2:2 1; c3:01b)]```.","line":17,"success":true,"result":{"expect":null,"toMatch":null,"expectError":"","toMatchError":""},"error":"","aborted":false,"skipped":false,"parseError":false,"start":"2022-07-04T15:54:26.346134000","time":"0D00:00:00.000011000"}]