{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview \u00b6 This document contains documentation for the following APIs: cast dict dt file io list math os rnd str tbl","title":"Introduction"},{"location":"index.html#overview","text":"This document contains documentation for the following APIs: cast dict dt file io list math os rnd str tbl","title":"Overview"},{"location":"cast.html","text":".cast.bitsToInteger \u00b6 Cast bits to integer. See sv . Parameter: Name Type Description bits bool[] A vector of 8/16/32/64 booleans. Returns: Type Description byte | integer A corresponding byte or short/int/long integer. Throws: Type Description length If the length of bytes is not 8/16/32/64. type If the data type is not bool vector. .cast.bytesToInteger \u00b6 Cast bytes to integer. See sv . Parameter: Name Type Description bytes byte[] A vector of 2/4/8 bytes. Returns: Type Description integer A corresponding short/int/long integer. Throws: Type Description length If the length of bytes is not 2/4/8. type If the data type is not byte vector. .cast.integerToBits \u00b6 Cast integer to bits. See vs . Parameter: Name Type Description number byte | integer A byte or integer. Returns: Type Description bool[] Bit representation of the integer. .cast.integerToBytes \u00b6 Cast integer to bytes. See vs . Parameter: Name Type Description number integer An integer. Returns: Type Description byte[] Byte representation of the integer.","title":"cast"},{"location":"cast.html#castbitstointeger","text":"Cast bits to integer. See sv . Parameter: Name Type Description bits bool[] A vector of 8/16/32/64 booleans. Returns: Type Description byte | integer A corresponding byte or short/int/long integer. Throws: Type Description length If the length of bytes is not 8/16/32/64. type If the data type is not bool vector.","title":".cast.bitsToInteger"},{"location":"cast.html#castbytestointeger","text":"Cast bytes to integer. See sv . Parameter: Name Type Description bytes byte[] A vector of 2/4/8 bytes. Returns: Type Description integer A corresponding short/int/long integer. Throws: Type Description length If the length of bytes is not 2/4/8. type If the data type is not byte vector.","title":".cast.bytesToInteger"},{"location":"cast.html#castintegertobits","text":"Cast integer to bits. See vs . Parameter: Name Type Description number byte | integer A byte or integer. Returns: Type Description bool[] Bit representation of the integer.","title":".cast.integerToBits"},{"location":"cast.html#castintegertobytes","text":"Cast integer to bytes. See vs . Parameter: Name Type Description number integer An integer. Returns: Type Description byte[] Byte representation of the integer.","title":".cast.integerToBytes"},{"location":"dict.html","text":".dict.argSortAsc \u00b6 Keys for ascending sort. See iasc . Parameter: Name Type Description dict dict A dictionary. Returns: Type Description list Keys reordered to sort the dictionary in ascending order. .dict.rankAsc \u00b6 Position in the ascending sorted dictionary. See rank . Parameter: Name Type Description vector Returns: Type Description long[] Indices of values they would appear at in the ascending sorted list. .dict.sortAsc \u00b6 Sort dictionary value in ascending order of value. See asc . Parameter: Name Type Description dict dict A dictionary. Returns: Type Description dict A dictionary of the same elements sorted in ascending order of value.","title":"dict"},{"location":"dict.html#dictargsortasc","text":"Keys for ascending sort. See iasc . Parameter: Name Type Description dict dict A dictionary. Returns: Type Description list Keys reordered to sort the dictionary in ascending order.","title":".dict.argSortAsc"},{"location":"dict.html#dictrankasc","text":"Position in the ascending sorted dictionary. See rank . Parameter: Name Type Description vector Returns: Type Description long[] Indices of values they would appear at in the ascending sorted list.","title":".dict.rankAsc"},{"location":"dict.html#dictsortasc","text":"Sort dictionary value in ascending order of value. See asc . Parameter: Name Type Description dict dict A dictionary. Returns: Type Description dict A dictionary of the same elements sorted in ascending order of value.","title":".dict.sortAsc"},{"location":"dt.html","text":".dt.localToUtc \u00b6 UTC equivalent of local timestamp. See gtime . Parameter: Name Type Description x datetime | timestamp A local datetime/timestamp. Returns: Type Description datetime | timestamp The equivalent UTC datetime/timestamp. .dt.utcToLocal \u00b6 Local equivalent of UTC timestamp. See ltime . Parameter: Name Type Description x datetime | timestamp A UTC datetime/timestamp. Returns: Type Description datetime | timestamp The equivalent local datetime/timestamp.","title":"dt"},{"location":"dt.html#dtlocaltoutc","text":"UTC equivalent of local timestamp. See gtime . Parameter: Name Type Description x datetime | timestamp A local datetime/timestamp. Returns: Type Description datetime | timestamp The equivalent UTC datetime/timestamp.","title":".dt.localToUtc"},{"location":"dt.html#dtutctolocal","text":"Local equivalent of UTC timestamp. See ltime . Parameter: Name Type Description x datetime | timestamp A UTC datetime/timestamp. Returns: Type Description datetime | timestamp The equivalent local datetime/timestamp.","title":".dt.utcToLocal"},{"location":"file.html","text":".file.join \u00b6 Join directories and file to form a path. See sv . Parameter: Name Type Description items symbol[] A symbol list where the first is a file symbol. Returns: Type Description symbol A file symbol by joining the items with slashes. .file.split \u00b6 Split file path into directory and file parts. See vs . Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol[] A file symbol for the directory part and a symbol for filename part.","title":"file"},{"location":"file.html#filejoin","text":"Join directories and file to form a path. See sv . Parameter: Name Type Description items symbol[] A symbol list where the first is a file symbol. Returns: Type Description symbol A file symbol by joining the items with slashes.","title":".file.join"},{"location":"file.html#filesplit","text":"Split file path into directory and file parts. See vs . Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol[] A file symbol for the directory part and a symbol for filename part.","title":".file.split"},{"location":"io.html","text":".io.close \u00b6 Close file handle. See hclose . Parameter: Name Type Description handle int A file handle. .io.delete \u00b6 Delete a file or directory if it's empty. See hdel . Parameter: Name Type Description file symbol A file symbol. Returns: Type Description symbol The file symbol. See Also: .io.deleteAll .io.deleteAll \u00b6 Delete a file, or directory and its files and subdirectories recursively. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol The file symbol. See Also: .io.delete .io.getSize \u00b6 File size in bytes. See hcount . Parameter: Name Type Description file symbol A file symbol pointing to a file. Returns: Type Description long Size of the file. If the file is compressed, return the size of the original uncompressed file. .io.isDir \u00b6 Check if the argument represents a directory and it exists. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description bool 1b if it exists and it's a directory, 0b otherwise. see .io.isFile .io.isFile \u00b6 Check if the argument represents a file and it exists. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description bool 1b if it exists and it's a file, 0b otherwise. see .io.isDir .io.list \u00b6 List file/directory. See key . Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol[] | list The file if the path points to a file; items under the directory in ascending order, if the path points to a directory; empty general list if the path doesn't exist. see .io.listAll .io.listAll \u00b6 List file or directory recursively. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol[] | list The file if the path points to a file; the directory and items under it recursively in ascending order, if the path points to a directory; empty general list if the path doesn't exist. see .io.list .io.loadObject \u00b6 Load a q object from disk. It can be memory mapped, or copied into memory, subject to its datatype and how it was saved initially. See get . See Memory mapping in kdb+ . Parameter: Name Type Description file symbol A file. Returns: Type Description * The q object represented by the file. See Also: .io.saveObject .io.loadSplayedTable \u00b6 Load splayed table. The table is memory-mapped in deferred mode. See get . Parameter: Name Type Description dir symbol A directory. Returns: Type Description * The splayed table. See Also: .io.splayTable .io.open \u00b6 Open file. See hopen . Parameter: Name Type Description file symbol | string A file symbol or file path, pointing to a file. Returns: Type Description int A connection handle to the file. .io.readBytesFromFile \u00b6 Read bytes from file. See read1 . Parameters: Name Type Description file symbol A file symbol pointing to a file. param dict Parameters: pos for starting position, len for length to read. param.pos integer param.len integer Returns: Type Description byte[] All bytes from the file if param is an empty dictionary, or those specified by the starting position and length. .io.readBytesFromNamedPipe \u00b6 Read bytes from named pipe. See read1 . Parameters: Name Type Description handle int A handle to named pipe. len integer Length to read. Returns: Type Description string Bytes of the given length from the given handle. .io.readTextFromFile \u00b6 Read text from file. See read0 . Parameters: Name Type Description file symbol A file symbol pointing to a file. param dict Parameters: pos for starting position, len for length to read. param.pos integer param.len integer Returns: Type Description string | string[] Lines of the file as a list of strings if param is an empty dictionary, or a string specified by the starting position and length. .io.readTextFromHandle \u00b6 Read text from handle. See read0 . Parameter: Name Type Description handle int A system/process handle. Returns: Type Description string Text from the given handle. .io.readTextFromNamedPipe \u00b6 Read text from named pipe. See read0 . Parameters: Name Type Description handle int A handle to named pipe. len integer Length to read. Returns: Type Description string Text of the given length from the given handle. .io.saveObject \u00b6 Save a q object to disk. See set . Parameters: Name Type Description file symbol A file. object * A q object to be saved. Returns: Type Description symbol The file where the object is saved. See Also: .io.loadObject .io.saveObjectCompressed .io.saveObjectCompressed \u00b6 Save a q object to disk, compressed. See set . See Compression parameters . Parameters: Name Type Description file symbol A file. object * A q object to be saved. size integer Logical block size. algo integer Compression algorithm. level integer Compression level. Returns: Type Description symbol The file where the object is saved. See Also: .io.saveObject .io.saveTables \u00b6 Save tables. The first column of each table saved has the partitioned attribute. See dsave . Parameters: Name Type Description file symbol | symbol[] A file, or a vector containing an HDB root directory and a partition name. table symbol | symbol[] Table name(s) Returns: Type Description symbol[] The list of table names that are saved. .io.splayTable \u00b6 Splay table. See set . Parameters: Name Type Description dir symbol A directory path. table table A table to be splayed. Returns: Type Description symbol The directory. See Also: .io.loadSplayedTable .io.splayTableCompressed .io.splayTableCompressedPerSpec .io.splayTableCompressed \u00b6 Splay table, compressed. See set . See Compression parameters . Parameters: Name Type Description dir symbol A directory path. table table A table to be splayed. size integer Logical block size. algo integer Compression algorithm. level integer Compression level. Returns: Type Description symbol The directory. See Also: .io.splayTable .io.splayTableCompressedPerSpec .io.splayTableCompressedPerSpec \u00b6 Splay table, compressed using per-column compression specification. Compression for unspecified columns is specified either by an entry for the null symbol or by .z.zd . See set . See Compression parameters . Parameters: Name Type Description dir symbol A directory path. table table A table to be splayed. compSpec dict A dictionary whose keys are either columns names of the table or the null symbol, and whose values are each an integer vector: size, algo, level. Returns: Type Description symbol The directory. See Also: .io.splayTable .io.splayTableCompressed","title":"io"},{"location":"io.html#ioclose","text":"Close file handle. See hclose . Parameter: Name Type Description handle int A file handle.","title":".io.close"},{"location":"io.html#iodelete","text":"Delete a file or directory if it's empty. See hdel . Parameter: Name Type Description file symbol A file symbol. Returns: Type Description symbol The file symbol. See Also: .io.deleteAll","title":".io.delete"},{"location":"io.html#iodeleteall","text":"Delete a file, or directory and its files and subdirectories recursively. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol The file symbol. See Also: .io.delete","title":".io.deleteAll"},{"location":"io.html#iogetsize","text":"File size in bytes. See hcount . Parameter: Name Type Description file symbol A file symbol pointing to a file. Returns: Type Description long Size of the file. If the file is compressed, return the size of the original uncompressed file.","title":".io.getSize"},{"location":"io.html#ioisdir","text":"Check if the argument represents a directory and it exists. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description bool 1b if it exists and it's a directory, 0b otherwise. see .io.isFile","title":".io.isDir"},{"location":"io.html#ioisfile","text":"Check if the argument represents a file and it exists. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description bool 1b if it exists and it's a file, 0b otherwise. see .io.isDir","title":".io.isFile"},{"location":"io.html#iolist","text":"List file/directory. See key . Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol[] | list The file if the path points to a file; items under the directory in ascending order, if the path points to a directory; empty general list if the path doesn't exist. see .io.listAll","title":".io.list"},{"location":"io.html#iolistall","text":"List file or directory recursively. Parameter: Name Type Description path symbol A file symbol. Returns: Type Description symbol[] | list The file if the path points to a file; the directory and items under it recursively in ascending order, if the path points to a directory; empty general list if the path doesn't exist. see .io.list","title":".io.listAll"},{"location":"io.html#ioloadobject","text":"Load a q object from disk. It can be memory mapped, or copied into memory, subject to its datatype and how it was saved initially. See get . See Memory mapping in kdb+ . Parameter: Name Type Description file symbol A file. Returns: Type Description * The q object represented by the file. See Also: .io.saveObject","title":".io.loadObject"},{"location":"io.html#ioloadsplayedtable","text":"Load splayed table. The table is memory-mapped in deferred mode. See get . Parameter: Name Type Description dir symbol A directory. Returns: Type Description * The splayed table. See Also: .io.splayTable","title":".io.loadSplayedTable"},{"location":"io.html#ioopen","text":"Open file. See hopen . Parameter: Name Type Description file symbol | string A file symbol or file path, pointing to a file. Returns: Type Description int A connection handle to the file.","title":".io.open"},{"location":"io.html#ioreadbytesfromfile","text":"Read bytes from file. See read1 . Parameters: Name Type Description file symbol A file symbol pointing to a file. param dict Parameters: pos for starting position, len for length to read. param.pos integer param.len integer Returns: Type Description byte[] All bytes from the file if param is an empty dictionary, or those specified by the starting position and length.","title":".io.readBytesFromFile"},{"location":"io.html#ioreadbytesfromnamedpipe","text":"Read bytes from named pipe. See read1 . Parameters: Name Type Description handle int A handle to named pipe. len integer Length to read. Returns: Type Description string Bytes of the given length from the given handle.","title":".io.readBytesFromNamedPipe"},{"location":"io.html#ioreadtextfromfile","text":"Read text from file. See read0 . Parameters: Name Type Description file symbol A file symbol pointing to a file. param dict Parameters: pos for starting position, len for length to read. param.pos integer param.len integer Returns: Type Description string | string[] Lines of the file as a list of strings if param is an empty dictionary, or a string specified by the starting position and length.","title":".io.readTextFromFile"},{"location":"io.html#ioreadtextfromhandle","text":"Read text from handle. See read0 . Parameter: Name Type Description handle int A system/process handle. Returns: Type Description string Text from the given handle.","title":".io.readTextFromHandle"},{"location":"io.html#ioreadtextfromnamedpipe","text":"Read text from named pipe. See read0 . Parameters: Name Type Description handle int A handle to named pipe. len integer Length to read. Returns: Type Description string Text of the given length from the given handle.","title":".io.readTextFromNamedPipe"},{"location":"io.html#iosaveobject","text":"Save a q object to disk. See set . Parameters: Name Type Description file symbol A file. object * A q object to be saved. Returns: Type Description symbol The file where the object is saved. See Also: .io.loadObject .io.saveObjectCompressed","title":".io.saveObject"},{"location":"io.html#iosaveobjectcompressed","text":"Save a q object to disk, compressed. See set . See Compression parameters . Parameters: Name Type Description file symbol A file. object * A q object to be saved. size integer Logical block size. algo integer Compression algorithm. level integer Compression level. Returns: Type Description symbol The file where the object is saved. See Also: .io.saveObject","title":".io.saveObjectCompressed"},{"location":"io.html#iosavetables","text":"Save tables. The first column of each table saved has the partitioned attribute. See dsave . Parameters: Name Type Description file symbol | symbol[] A file, or a vector containing an HDB root directory and a partition name. table symbol | symbol[] Table name(s) Returns: Type Description symbol[] The list of table names that are saved.","title":".io.saveTables"},{"location":"io.html#iosplaytable","text":"Splay table. See set . Parameters: Name Type Description dir symbol A directory path. table table A table to be splayed. Returns: Type Description symbol The directory. See Also: .io.loadSplayedTable .io.splayTableCompressed .io.splayTableCompressedPerSpec","title":".io.splayTable"},{"location":"io.html#iosplaytablecompressed","text":"Splay table, compressed. See set . See Compression parameters . Parameters: Name Type Description dir symbol A directory path. table table A table to be splayed. size integer Logical block size. algo integer Compression algorithm. level integer Compression level. Returns: Type Description symbol The directory. See Also: .io.splayTable .io.splayTableCompressedPerSpec","title":".io.splayTableCompressed"},{"location":"io.html#iosplaytablecompressedperspec","text":"Splay table, compressed using per-column compression specification. Compression for unspecified columns is specified either by an entry for the null symbol or by .z.zd . See set . See Compression parameters . Parameters: Name Type Description dir symbol A directory path. table table A table to be splayed. compSpec dict A dictionary whose keys are either columns names of the table or the null symbol, and whose values are each an integer vector: size, algo, level. Returns: Type Description symbol The directory. See Also: .io.splayTable .io.splayTableCompressed","title":".io.splayTableCompressedPerSpec"},{"location":"list.html","text":".list.argSortAsc \u00b6 Indices for ascending sort. See iasc . Parameter: Name Type Description vector *[] A vector. Returns: Type Description long[] Indices needed to sort the vector in ascending order. .list.binSearchFirst \u00b6 Binary search - first index of not smaller value. This function is right-atomic. See bin . Parameters: Name Type Description vector *[] A sorted vector. target * A value. Returns: Type Description long Index of the first item in the vector whose value is not smaller than the target. .list.binSearchLast \u00b6 Binary search - last index of not greater value. This function is right-atomic. See bin . Parameters: Name Type Description vector *[] A sorted vector. target * A value. Returns: Type Description long Index of the last item in the vector whose value is not greater than the target. .list.rankAsc \u00b6 Position in the ascending sorted list. See rank . Parameter: Name Type Description vector *[] A vector. Returns: Type Description long[] Indices of elements they would appear at in the ascending sorted list. .list.repeat \u00b6 Repeat. See where . Parameter: Name Type Description times dict A mapping between elements to repeat and the number of times they are repeated. Returns: Type Description list A list where the keys are repeated by the corresponding number of times. .list.slice \u00b6 Slice of a list. See sublist . Parameters: Name Type Description list list A list. pos integer Starting position. len integer Length. Returns: Type Description list A slice of the list starting at the given position and up to the given length. .list.sortAsc \u00b6 Sort vector in ascending order. See asc . Parameter: Name Type Description vector *[] A vector. Returns: Type Description *[] A vector of the same items but sorted in ascending order of value, with the sorted attribute set.","title":"list"},{"location":"list.html#listargsortasc","text":"Indices for ascending sort. See iasc . Parameter: Name Type Description vector *[] A vector. Returns: Type Description long[] Indices needed to sort the vector in ascending order.","title":".list.argSortAsc"},{"location":"list.html#listbinsearchfirst","text":"Binary search - first index of not smaller value. This function is right-atomic. See bin . Parameters: Name Type Description vector *[] A sorted vector. target * A value. Returns: Type Description long Index of the first item in the vector whose value is not smaller than the target.","title":".list.binSearchFirst"},{"location":"list.html#listbinsearchlast","text":"Binary search - last index of not greater value. This function is right-atomic. See bin . Parameters: Name Type Description vector *[] A sorted vector. target * A value. Returns: Type Description long Index of the last item in the vector whose value is not greater than the target.","title":".list.binSearchLast"},{"location":"list.html#listrankasc","text":"Position in the ascending sorted list. See rank . Parameter: Name Type Description vector *[] A vector. Returns: Type Description long[] Indices of elements they would appear at in the ascending sorted list.","title":".list.rankAsc"},{"location":"list.html#listrepeat","text":"Repeat. See where . Parameter: Name Type Description times dict A mapping between elements to repeat and the number of times they are repeated. Returns: Type Description list A list where the keys are repeated by the corresponding number of times.","title":".list.repeat"},{"location":"list.html#listslice","text":"Slice of a list. See sublist . Parameters: Name Type Description list list A list. pos integer Starting position. len integer Length. Returns: Type Description list A slice of the list starting at the given position and up to the given length.","title":".list.slice"},{"location":"list.html#listsortasc","text":"Sort vector in ascending order. See asc . Parameter: Name Type Description vector *[] A vector. Returns: Type Description *[] A vector of the same items but sorted in ascending order of value, with the sorted attribute set.","title":".list.sortAsc"},{"location":"math.html","text":".math.abs \u00b6 Returns absolute value of x. This function is atomic. See abs . Parameter: Name Type Description x number A number. Returns: Type Description number Absolute value of x. .math.acos \u00b6 Returns the arccosine of x. This function is atomic. See acos . Parameter: Name Type Description x number A number. Returns: Type Description float Arccosine of x, in radians. Null is returned if x is not between -1 and 1. .math.asin \u00b6 Returns the arcsine of x. This function is atomic. See asin . Parameter: Name Type Description x number A number. Returns: Type Description float Arcsine of x, in radians. Null is returned if x is not between -1 and 1. .math.atan \u00b6 Returns the arctangent of x. This function is atomic. See atan . Parameter: Name Type Description x number A number. Returns: Type Description float Arctangent of x, in radians. .math.avg \u00b6 Arithmetic mean. See avg . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Arithmetic mean of x. Null is returned if x is empty, or contains both positive and negative infinity. Null items in x are ignored. See Also: .math.avgStrict .math.movingAvg .math.runningAvg .math.weightedAvg .math.avgStrict \u00b6 Arithmetic mean, strictly ignoring nulls. Parameter: Name Type Description x *[] Arbitrarily nested numeric list. Returns: Type Description * Arithmetic mean of x. Almost identical to .math.avg except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.avg .math.ceiling \u00b6 Round up. This function is atomic. See ceiling . Parameter: Name Type Description x number A number. Returns: Type Description long least integer greater than or equal to x. .math.correlation \u00b6 Correlation. See cor . Parameters: Name Type Description x number[] First numeric list. y number[] Second numeric list conforming to x. Returns: Type Description float Correlation of x and y. The result is between -1 and 1. .math.cos \u00b6 Returns the cosine of x. This function is atomic. See cos . Parameter: Name Type Description x number A number in radians. Returns: Type Description float Cosine of x. The result is null if x is null or infinity. .math.covariance \u00b6 Covariance. See cov . Parameters: Name Type Description x number[] First numeric list. y number[] Second numeric list conforming to x. Returns: Type Description float Covariance of x and y. .math.diff \u00b6 Differences between consecutive items. See deltas . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number[] Differences between consecutive items in x, with the first difference being the same as the first element of x. See Also: .math.diff0 .math.diff0 \u00b6 Differences between consecutive items, with the first difference being 0. Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number[] Differences between consecutive items in x, with the first difference being 0. See Also: .math.diff .math.div \u00b6 Integer division. This function is atomic. See div . Parameters: Name Type Description x number Dividend. y number Divisor. Returns: Type Description number[] The greatest whole number that does not exceed x%y . .math.ema \u00b6 Exponential moving average. See ema . Parameters: Name Type Description x number | number[] A number or numeric list of the same length as y. y number[] A numeric list. Returns: Type Description float[] Exponential moving average of y, with x as the smoothing parameter. .math.exp \u00b6 Raise e to a power. This function is atomic. See exp . Parameter: Name Type Description x number Exponent. Returns: Type Description float The base of natural logarithms to the power of x, or null if x is null. See Also: .math.log .math.xexp .math.floor \u00b6 Round down. This function is atomic. See floor . Parameter: Name Type Description x number A number. Returns: Type Description long greatest integer less than or equal to x. .math.inv \u00b6 Matrix inverse. See inv . Parameter: Name Type Description x float[][] A matrix. Returns: Type Description float[][] Inverse of non-singular float matrix x .math.log \u00b6 Natural logarithm. This function is atomic. See log . Parameter: Name Type Description x number A number. Returns: Type Description float the natural logarithm of x, or null if x is null or less than zero, or negative infinity if x is zero. See Also: .math.exp .math.xlog .math.lsq \u00b6 Least squares, approximately matrix division. See lsq . Parameters: Name Type Description a float[][] A matrix with the same number of columns as b. b float[][] A matrix whose number of rows do not exceed the number of columns, and whose rows are linearly independent. Returns: Type Description float[][] Least-squares solution to a linear matrix equation a=x mul b where mul is matrix multiplication. See Also: .math.matmul .math.matmul \u00b6 Matrix multiplication, or dot product. See mmu . Parameters: Name Type Description x float[] | float[][] A float vector or matrix. y float[] | float[][] Another float vector or matrix, where the number of elements in y must match the number of elements in x if x is a vector, or the number of columns of x if x is a matrix. Returns: Type Description float | float[] Matrix product or dot product of x and y. See Also: .math.lsq .math.max \u00b6 Maximum. See max . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Maximum of items in x. Nulls are ignored, except that if the items of x are all nulls, the result is negative infinity. See Also: .math.min .math.movingMax .math.runningMax .math.median \u00b6 Median. See med . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Median of x. .math.min \u00b6 Minimum. See min . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Minimum of items in x. Nulls are ignored, except that if the items of x are all nulls, the result is infinity. See Also: .math.max .math.movingMin .math.runningMin .math.minStrict \u00b6 Minimum, strictly ignoring null. Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Minimum of items in x. Almost identical to .math.min except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.min .math.mod \u00b6 Modulus. This function is atomic. See mod . Parameters: Name Type Description x number Dividend. y number Divisor. Returns: Type Description number The remainder of x%y . .math.movingAvg \u00b6 Moving averages. See mavg . Parameters: Name Type Description x short | int | long A positive finite integer. y number[] A numeric list. Returns: Type Description float x-item moving average of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.avg .math.runningAvg .math.weightedAvg .math.movingMax \u00b6 Moving maximums. See mmax . Parameters: Name Type Description x number A positive finite integer. y number[] A numeric list. Returns: Type Description number x-item moving maximums of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.max .math.movingMin .math.runningMax .math.movingMin \u00b6 Moving minimums. See mmin . Parameters: Name Type Description x number[] A positive finite integer. y number[] A numeric list. Returns: Type Description number x-item moving minimums of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.min .math.movingMax .math.runningMin .math.movingStdev \u00b6 Returns x-item moving standard deviation of y. See mdev . Parameters: Name Type Description x short | int | long Number of items in the calculation scope. y number[] A numeric list. Returns: Type Description number[] x-item moving standard deviation of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. .math.movingSum \u00b6 Moving sums. See msum . Parameters: Name Type Description x short | int | long A positive finite integer. y number[] A numeric list. Returns: Type Description number x-item moving sums of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.runningSum .math.sum .math.weightedSum .math.neg \u00b6 Negate. This function is atomic. See neg . Parameter: Name Type Description x bool | number A number or boolean value. Returns: Type Description number Negation of x. .math.polyCoefficients \u00b6 Calculate polynomial coefficients. See vs . Parameters: Name Type Description polynomial number A polynomial value. base number A number where the polynomial is evaluated. Returns: Type Description number[] Coefficients under which the polynomial value is obtained at the base value. Each of the coefficients is smaller than the base. .math.polynomial \u00b6 Calculate polynomial. See sv . Parameters: Name Type Description coefficients number[] Coefficients of the polynomial. base number A number where the polynomial is evaluated. Returns: Type Description number A polynomial evaluated at x under the given coefficients. .math.prd \u00b6 Product. See prd . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Product of x. Nulls are treated as 1. See Also: .math.prdStrict .math.runningPrd .math.prdStrict \u00b6 Product, strictly ignoring nulls. Parameter: Name Type Description x *[] A numeric list. Returns: Type Description * Product of x. Almost identical to .math.prd except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.prd .math.ratio \u00b6 Ratios between consecutive items. See ratios . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number[] Ratios between consecutive items in x, with the first ratio being the same as the first element of x. See Also: .math.ratio0 .math.ratio0 \u00b6 Ratios between consecutive items, with the first ratio being 1. Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float[] Ratios between consecutive items in x, with the first ratio being 1.0. See Also: .math.ratio .math.reciprocal \u00b6 Reciprocal. This function is atomic. See reciprocal . Parameter: Name Type Description x number A number. Returns: Type Description float Reciprocal of x. .math.runningAvg \u00b6 Running averages. See avgs . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float[] Running averages of x. It applies function .math.avg to successive prefixes of x. See Also: .math.avg .math.movingAvg .math.weightedAvg .math.runningMax \u00b6 Maximums. See maxs . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running maximum of x. It applies function .math.max to successive prefixes of x. See Also: .math.max .math.movingMax .math.runningMin .math.runningMin \u00b6 Minimums. See mins . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running minimum of x. It applies function .math.min to successive prefixes of x. See Also: .math.min .math.movingMin .math.runningMax .math.runningPrd \u00b6 Products. See prds . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running products of x. It applies function .math.prd to successive prefixes of x. See Also: .math.prd .math.runningSum \u00b6 Running sums. See sums . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running sums of x. It applies function .math.sum to successive prefixes of x. See Also: .math.movingSum .math.sum .math.weightedSum .math.sampleCovariance \u00b6 Sample covariance. See scov . Parameters: Name Type Description x number[] First numeric list. y number[] Second numeric list conforming to x. Returns: Type Description float Sample covariance of x and y. .math.sampleVariance \u00b6 Sample variance. See svar . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Sample variance of x. Nulls are ignored. .math.sign \u00b6 Sign. This function is atomic. See signum . Parameter: Name Type Description x bool | number A number or boolean value. Returns: Type Description int -1 if x is null or negative, 0 if x is zero, 1 if x is positive. .math.sin \u00b6 Returns the sine of x. This function is atomic. See sin . Parameter: Name Type Description x number A number in radians Returns: Type Description float Sine of x. The result is null if x is null or infinity. .math.sqrt \u00b6 Square root. This function is atomic. See sqrt . Parameter: Name Type Description x number A number. Returns: Type Description float The square root of x if x is non-negative and finite, null if x is negative or null, 0w if x is real or float infinity, or square root of the largest value for the datatype .math.stdev \u00b6 Returns standard deviation. See dev . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Standard deviation of x. .math.sum \u00b6 Total. See sum . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Total of x. Null items in x are treated as zeros. See Also: .math.movingSum .math.runningSum .math.sumStrict .math.weightedSum .math.sumStrict \u00b6 Total, consistently ignoring nulls. Parameter: Name Type Description x *[] Arbitrarily nested numeric list. Returns: Type Description * Total of x. Almost identical to .math.sum except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.sum .math.tan \u00b6 Returns the tangent of x. This function is atomic. See tan . Parameter: Name Type Description x number A number in radians. Returns: Type Description float Tangent of x. The result is null if x is null or infinity. .math.unbiasedStdev \u00b6 Returns unbiased estimation of standard deviation. See sdev . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float unbiased estimation of standard deviation of x. See Also: .math.stdev .math.variance \u00b6 Variance. See var . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Variance of x. Nulls are ignored. .math.weightedAvg \u00b6 Weighted average. See wavg . Parameters: Name Type Description x number[] A numeric list representing weights. y number[] A numeric list representing values. Returns: Type Description float Average of y weighted by x. See Also: .math.avg .math.movingAvg .math.runningAvg .math.weightedSum \u00b6 Weighted sum. See wsum . Parameters: Name Type Description x number[] A numeric list representing weights. y number[] A numeric list representing values. Returns: Type Description float Sum of y weighted by x. See Also: .math.movingSum .math.runningSum .math.sum .math.within \u00b6 Check bounds. See within . Parameters: Name Type Description x number | number[] A number. y number[] A pair of numbers of the same type as x if x is a number, or a flipped list of pairs of the same count and type as x if x is a list. Returns: Type Description bool | bool[] whether x is within the inclusive bounds given by y. .math.xexp \u00b6 Raise x to a power. This function is atomic. See xexp . Parameters: Name Type Description base number Base. exponent number Exponent. Returns: Type Description float The base of natural logarithms to the power of x, or null if x is null or the operation isn't valid, e.g. -1 xexp .5 . See Also: .math.exp .math.xlog .math.xlog \u00b6 Logarithm. This function is atomic. See xlog . Parameters: Name Type Description x number Base. y number Exponent. Returns: Type Description float The base-x logarithm of y, or null if y is negative, or negative infinity if y is zero. See Also: .math.log .math.xexp","title":"math"},{"location":"math.html#mathabs","text":"Returns absolute value of x. This function is atomic. See abs . Parameter: Name Type Description x number A number. Returns: Type Description number Absolute value of x.","title":".math.abs"},{"location":"math.html#mathacos","text":"Returns the arccosine of x. This function is atomic. See acos . Parameter: Name Type Description x number A number. Returns: Type Description float Arccosine of x, in radians. Null is returned if x is not between -1 and 1.","title":".math.acos"},{"location":"math.html#mathasin","text":"Returns the arcsine of x. This function is atomic. See asin . Parameter: Name Type Description x number A number. Returns: Type Description float Arcsine of x, in radians. Null is returned if x is not between -1 and 1.","title":".math.asin"},{"location":"math.html#mathatan","text":"Returns the arctangent of x. This function is atomic. See atan . Parameter: Name Type Description x number A number. Returns: Type Description float Arctangent of x, in radians.","title":".math.atan"},{"location":"math.html#mathavg","text":"Arithmetic mean. See avg . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Arithmetic mean of x. Null is returned if x is empty, or contains both positive and negative infinity. Null items in x are ignored. See Also: .math.avgStrict .math.movingAvg .math.runningAvg .math.weightedAvg","title":".math.avg"},{"location":"math.html#mathavgstrict","text":"Arithmetic mean, strictly ignoring nulls. Parameter: Name Type Description x *[] Arbitrarily nested numeric list. Returns: Type Description * Arithmetic mean of x. Almost identical to .math.avg except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.avg","title":".math.avgStrict"},{"location":"math.html#mathceiling","text":"Round up. This function is atomic. See ceiling . Parameter: Name Type Description x number A number. Returns: Type Description long least integer greater than or equal to x.","title":".math.ceiling"},{"location":"math.html#mathcorrelation","text":"Correlation. See cor . Parameters: Name Type Description x number[] First numeric list. y number[] Second numeric list conforming to x. Returns: Type Description float Correlation of x and y. The result is between -1 and 1.","title":".math.correlation"},{"location":"math.html#mathcos","text":"Returns the cosine of x. This function is atomic. See cos . Parameter: Name Type Description x number A number in radians. Returns: Type Description float Cosine of x. The result is null if x is null or infinity.","title":".math.cos"},{"location":"math.html#mathcovariance","text":"Covariance. See cov . Parameters: Name Type Description x number[] First numeric list. y number[] Second numeric list conforming to x. Returns: Type Description float Covariance of x and y.","title":".math.covariance"},{"location":"math.html#mathdiff","text":"Differences between consecutive items. See deltas . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number[] Differences between consecutive items in x, with the first difference being the same as the first element of x. See Also: .math.diff0","title":".math.diff"},{"location":"math.html#mathdiff0","text":"Differences between consecutive items, with the first difference being 0. Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number[] Differences between consecutive items in x, with the first difference being 0. See Also: .math.diff","title":".math.diff0"},{"location":"math.html#mathdiv","text":"Integer division. This function is atomic. See div . Parameters: Name Type Description x number Dividend. y number Divisor. Returns: Type Description number[] The greatest whole number that does not exceed x%y .","title":".math.div"},{"location":"math.html#mathema","text":"Exponential moving average. See ema . Parameters: Name Type Description x number | number[] A number or numeric list of the same length as y. y number[] A numeric list. Returns: Type Description float[] Exponential moving average of y, with x as the smoothing parameter.","title":".math.ema"},{"location":"math.html#mathexp","text":"Raise e to a power. This function is atomic. See exp . Parameter: Name Type Description x number Exponent. Returns: Type Description float The base of natural logarithms to the power of x, or null if x is null. See Also: .math.log .math.xexp","title":".math.exp"},{"location":"math.html#mathfloor","text":"Round down. This function is atomic. See floor . Parameter: Name Type Description x number A number. Returns: Type Description long greatest integer less than or equal to x.","title":".math.floor"},{"location":"math.html#mathinv","text":"Matrix inverse. See inv . Parameter: Name Type Description x float[][] A matrix. Returns: Type Description float[][] Inverse of non-singular float matrix x","title":".math.inv"},{"location":"math.html#mathlog","text":"Natural logarithm. This function is atomic. See log . Parameter: Name Type Description x number A number. Returns: Type Description float the natural logarithm of x, or null if x is null or less than zero, or negative infinity if x is zero. See Also: .math.exp .math.xlog","title":".math.log"},{"location":"math.html#mathlsq","text":"Least squares, approximately matrix division. See lsq . Parameters: Name Type Description a float[][] A matrix with the same number of columns as b. b float[][] A matrix whose number of rows do not exceed the number of columns, and whose rows are linearly independent. Returns: Type Description float[][] Least-squares solution to a linear matrix equation a=x mul b where mul is matrix multiplication. See Also: .math.matmul","title":".math.lsq"},{"location":"math.html#mathmatmul","text":"Matrix multiplication, or dot product. See mmu . Parameters: Name Type Description x float[] | float[][] A float vector or matrix. y float[] | float[][] Another float vector or matrix, where the number of elements in y must match the number of elements in x if x is a vector, or the number of columns of x if x is a matrix. Returns: Type Description float | float[] Matrix product or dot product of x and y. See Also: .math.lsq","title":".math.matmul"},{"location":"math.html#mathmax","text":"Maximum. See max . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Maximum of items in x. Nulls are ignored, except that if the items of x are all nulls, the result is negative infinity. See Also: .math.min .math.movingMax .math.runningMax","title":".math.max"},{"location":"math.html#mathmedian","text":"Median. See med . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Median of x.","title":".math.median"},{"location":"math.html#mathmin","text":"Minimum. See min . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Minimum of items in x. Nulls are ignored, except that if the items of x are all nulls, the result is infinity. See Also: .math.max .math.movingMin .math.runningMin","title":".math.min"},{"location":"math.html#mathminstrict","text":"Minimum, strictly ignoring null. Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Minimum of items in x. Almost identical to .math.min except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.min","title":".math.minStrict"},{"location":"math.html#mathmod","text":"Modulus. This function is atomic. See mod . Parameters: Name Type Description x number Dividend. y number Divisor. Returns: Type Description number The remainder of x%y .","title":".math.mod"},{"location":"math.html#mathmovingavg","text":"Moving averages. See mavg . Parameters: Name Type Description x short | int | long A positive finite integer. y number[] A numeric list. Returns: Type Description float x-item moving average of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.avg .math.runningAvg .math.weightedAvg","title":".math.movingAvg"},{"location":"math.html#mathmovingmax","text":"Moving maximums. See mmax . Parameters: Name Type Description x number A positive finite integer. y number[] A numeric list. Returns: Type Description number x-item moving maximums of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.max .math.movingMin .math.runningMax","title":".math.movingMax"},{"location":"math.html#mathmovingmin","text":"Moving minimums. See mmin . Parameters: Name Type Description x number[] A positive finite integer. y number[] A numeric list. Returns: Type Description number x-item moving minimums of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.min .math.movingMax .math.runningMin","title":".math.movingMin"},{"location":"math.html#mathmovingstdev","text":"Returns x-item moving standard deviation of y. See mdev . Parameters: Name Type Description x short | int | long Number of items in the calculation scope. y number[] A numeric list. Returns: Type Description number[] x-item moving standard deviation of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively.","title":".math.movingStdev"},{"location":"math.html#mathmovingsum","text":"Moving sums. See msum . Parameters: Name Type Description x short | int | long A positive finite integer. y number[] A numeric list. Returns: Type Description number x-item moving sums of y. The first x-1 elements of the results use only the first x-1 elements of y, respectively. See Also: .math.runningSum .math.sum .math.weightedSum","title":".math.movingSum"},{"location":"math.html#mathneg","text":"Negate. This function is atomic. See neg . Parameter: Name Type Description x bool | number A number or boolean value. Returns: Type Description number Negation of x.","title":".math.neg"},{"location":"math.html#mathpolycoefficients","text":"Calculate polynomial coefficients. See vs . Parameters: Name Type Description polynomial number A polynomial value. base number A number where the polynomial is evaluated. Returns: Type Description number[] Coefficients under which the polynomial value is obtained at the base value. Each of the coefficients is smaller than the base.","title":".math.polyCoefficients"},{"location":"math.html#mathpolynomial","text":"Calculate polynomial. See sv . Parameters: Name Type Description coefficients number[] Coefficients of the polynomial. base number A number where the polynomial is evaluated. Returns: Type Description number A polynomial evaluated at x under the given coefficients.","title":".math.polynomial"},{"location":"math.html#mathprd","text":"Product. See prd . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Product of x. Nulls are treated as 1. See Also: .math.prdStrict .math.runningPrd","title":".math.prd"},{"location":"math.html#mathprdstrict","text":"Product, strictly ignoring nulls. Parameter: Name Type Description x *[] A numeric list. Returns: Type Description * Product of x. Almost identical to .math.prd except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.prd","title":".math.prdStrict"},{"location":"math.html#mathratio","text":"Ratios between consecutive items. See ratios . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number[] Ratios between consecutive items in x, with the first ratio being the same as the first element of x. See Also: .math.ratio0","title":".math.ratio"},{"location":"math.html#mathratio0","text":"Ratios between consecutive items, with the first ratio being 1. Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float[] Ratios between consecutive items in x, with the first ratio being 1.0. See Also: .math.ratio","title":".math.ratio0"},{"location":"math.html#mathreciprocal","text":"Reciprocal. This function is atomic. See reciprocal . Parameter: Name Type Description x number A number. Returns: Type Description float Reciprocal of x.","title":".math.reciprocal"},{"location":"math.html#mathrunningavg","text":"Running averages. See avgs . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float[] Running averages of x. It applies function .math.avg to successive prefixes of x. See Also: .math.avg .math.movingAvg .math.weightedAvg","title":".math.runningAvg"},{"location":"math.html#mathrunningmax","text":"Maximums. See maxs . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running maximum of x. It applies function .math.max to successive prefixes of x. See Also: .math.max .math.movingMax .math.runningMin","title":".math.runningMax"},{"location":"math.html#mathrunningmin","text":"Minimums. See mins . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running minimum of x. It applies function .math.min to successive prefixes of x. See Also: .math.min .math.movingMin .math.runningMax","title":".math.runningMin"},{"location":"math.html#mathrunningprd","text":"Products. See prds . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running products of x. It applies function .math.prd to successive prefixes of x. See Also: .math.prd","title":".math.runningPrd"},{"location":"math.html#mathrunningsum","text":"Running sums. See sums . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Running sums of x. It applies function .math.sum to successive prefixes of x. See Also: .math.movingSum .math.sum .math.weightedSum","title":".math.runningSum"},{"location":"math.html#mathsamplecovariance","text":"Sample covariance. See scov . Parameters: Name Type Description x number[] First numeric list. y number[] Second numeric list conforming to x. Returns: Type Description float Sample covariance of x and y.","title":".math.sampleCovariance"},{"location":"math.html#mathsamplevariance","text":"Sample variance. See svar . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Sample variance of x. Nulls are ignored.","title":".math.sampleVariance"},{"location":"math.html#mathsign","text":"Sign. This function is atomic. See signum . Parameter: Name Type Description x bool | number A number or boolean value. Returns: Type Description int -1 if x is null or negative, 0 if x is zero, 1 if x is positive.","title":".math.sign"},{"location":"math.html#mathsin","text":"Returns the sine of x. This function is atomic. See sin . Parameter: Name Type Description x number A number in radians Returns: Type Description float Sine of x. The result is null if x is null or infinity.","title":".math.sin"},{"location":"math.html#mathsqrt","text":"Square root. This function is atomic. See sqrt . Parameter: Name Type Description x number A number. Returns: Type Description float The square root of x if x is non-negative and finite, null if x is negative or null, 0w if x is real or float infinity, or square root of the largest value for the datatype","title":".math.sqrt"},{"location":"math.html#mathstdev","text":"Returns standard deviation. See dev . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Standard deviation of x.","title":".math.stdev"},{"location":"math.html#mathsum","text":"Total. See sum . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description number Total of x. Null items in x are treated as zeros. See Also: .math.movingSum .math.runningSum .math.sumStrict .math.weightedSum","title":".math.sum"},{"location":"math.html#mathsumstrict","text":"Total, consistently ignoring nulls. Parameter: Name Type Description x *[] Arbitrarily nested numeric list. Returns: Type Description * Total of x. Almost identical to .math.sum except that null-ignoring behavior is consistent regardless of how nested a list is. See Also: .math.sum","title":".math.sumStrict"},{"location":"math.html#mathtan","text":"Returns the tangent of x. This function is atomic. See tan . Parameter: Name Type Description x number A number in radians. Returns: Type Description float Tangent of x. The result is null if x is null or infinity.","title":".math.tan"},{"location":"math.html#mathunbiasedstdev","text":"Returns unbiased estimation of standard deviation. See sdev . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float unbiased estimation of standard deviation of x. See Also: .math.stdev","title":".math.unbiasedStdev"},{"location":"math.html#mathvariance","text":"Variance. See var . Parameter: Name Type Description x number[] A numeric list. Returns: Type Description float Variance of x. Nulls are ignored.","title":".math.variance"},{"location":"math.html#mathweightedavg","text":"Weighted average. See wavg . Parameters: Name Type Description x number[] A numeric list representing weights. y number[] A numeric list representing values. Returns: Type Description float Average of y weighted by x. See Also: .math.avg .math.movingAvg .math.runningAvg","title":".math.weightedAvg"},{"location":"math.html#mathweightedsum","text":"Weighted sum. See wsum . Parameters: Name Type Description x number[] A numeric list representing weights. y number[] A numeric list representing values. Returns: Type Description float Sum of y weighted by x. See Also: .math.movingSum .math.runningSum .math.sum","title":".math.weightedSum"},{"location":"math.html#mathwithin","text":"Check bounds. See within . Parameters: Name Type Description x number | number[] A number. y number[] A pair of numbers of the same type as x if x is a number, or a flipped list of pairs of the same count and type as x if x is a list. Returns: Type Description bool | bool[] whether x is within the inclusive bounds given by y.","title":".math.within"},{"location":"math.html#mathxexp","text":"Raise x to a power. This function is atomic. See xexp . Parameters: Name Type Description base number Base. exponent number Exponent. Returns: Type Description float The base of natural logarithms to the power of x, or null if x is null or the operation isn't valid, e.g. -1 xexp .5 . See Also: .math.exp .math.xlog","title":".math.xexp"},{"location":"math.html#mathxlog","text":"Logarithm. This function is atomic. See xlog . Parameters: Name Type Description x number Base. y number Exponent. Returns: Type Description float The base-x logarithm of y, or null if y is negative, or negative infinity if y is zero. See Also: .math.log .math.xexp","title":".math.xlog"},{"location":"os.html","text":".os.getenv \u00b6 Get environment variable. See getenv . Parameter: Name Type Description name symbol Name of an environment variable. Returns: Type Description string Value of the environment variable if it exists, otherwise empty string. .os.setenv \u00b6 Set environment variable. See setenv .","title":"os"},{"location":"os.html#osgetenv","text":"Get environment variable. See getenv . Parameter: Name Type Description name symbol Name of an environment variable. Returns: Type Description string Value of the environment variable if it exists, otherwise empty string.","title":".os.getenv"},{"location":"os.html#ossetenv","text":"Set environment variable. See setenv .","title":".os.setenv"},{"location":"rnd.html","text":".rnd.pickFromList \u00b6 Pick randomly an item from a list. See rand . Parameter: Name Type Description x *[] A list. Returns: Type Description * An randomly selected item from x. .rnd.symbolOfLength \u00b6 Get a random symbol of given length. See rand . Parameter: Name Type Description x short | int | long A number between 1 and 8. Returns: Type Description symbol A random symbol of length x. .rnd.underLimit \u00b6 Get a random value under a limit. See rand . Parameter: Name Type Description x number A number. Returns: Type Description number An random value of the same type as x and smaller than x.","title":"rnd"},{"location":"rnd.html#rndpickfromlist","text":"Pick randomly an item from a list. See rand . Parameter: Name Type Description x *[] A list. Returns: Type Description * An randomly selected item from x.","title":".rnd.pickFromList"},{"location":"rnd.html#rndsymboloflength","text":"Get a random symbol of given length. See rand . Parameter: Name Type Description x short | int | long A number between 1 and 8. Returns: Type Description symbol A random symbol of length x.","title":".rnd.symbolOfLength"},{"location":"rnd.html#rndunderlimit","text":"Get a random value under a limit. See rand . Parameter: Name Type Description x number A number. Returns: Type Description number An random value of the same type as x and smaller than x.","title":".rnd.underLimit"},{"location":"str.html","text":".str.join \u00b6 String join. See sv . Parameters: Name Type Description strings string[] A list of strings. delimiter char | string Delimiter. Returns: Type Description string A string formed by the strings joined by the delimiter. .str.joinByLineBreak \u00b6 String join by line break. See sv . Parameter: Name Type Description strings string[] A list of strings. Returns: Type Description string A string formed by the strings joined by OS-dependent line break. .str.split \u00b6 String split. See vs . Parameters: Name Type Description str string A string. delimiter char | string Delimiter. Returns: Type Description string[] A list of strings split by the delimiter. .str.splitByLineBreak \u00b6 String split by line break. See vs . Parameter: Name Type Description str string A string. Returns: Type Description string[] A list of strings split by line break. It works for both Unix- and Windows-style line breaks.","title":"str"},{"location":"str.html#strjoin","text":"String join. See sv . Parameters: Name Type Description strings string[] A list of strings. delimiter char | string Delimiter. Returns: Type Description string A string formed by the strings joined by the delimiter.","title":".str.join"},{"location":"str.html#strjoinbylinebreak","text":"String join by line break. See sv . Parameter: Name Type Description strings string[] A list of strings. Returns: Type Description string A string formed by the strings joined by OS-dependent line break.","title":".str.joinByLineBreak"},{"location":"str.html#strsplit","text":"String split. See vs . Parameters: Name Type Description str string A string. delimiter char | string Delimiter. Returns: Type Description string[] A list of strings split by the delimiter.","title":".str.split"},{"location":"str.html#strsplitbylinebreak","text":"String split by line break. See vs . Parameter: Name Type Description str string A string. Returns: Type Description string[] A list of strings split by line break. It works for both Unix- and Windows-style line breaks.","title":".str.splitByLineBreak"},{"location":"tbl.html","text":".tbl.sortAsc \u00b6 Sort table in ascending order by first non-key column. See asc . Parameter: Name Type Description table table | keyed table A table or keyed table. Returns: Type Description table | keyed table The table or keyed table sorted by the first non-key column, with the sorted attribute set on it if there is only one non-key column, otherwise the partitioned attribute set. .tbl.sortAscByColumns \u00b6 Sort table in ascending order by given columns. See xasc . Parameters: Name Type Description table table | keyed table | symbol A table, keyed table, or table name. columns symbol | symbol[] Column name(s) of the table. Returns: Type Description table | keyed table | symbol The table sorted by the columns, if the table is passed by value, otherwise the table name itself where the sorting is in place. The sorted attribute is set on the first column.","title":"tbl"},{"location":"tbl.html#tblsortasc","text":"Sort table in ascending order by first non-key column. See asc . Parameter: Name Type Description table table | keyed table A table or keyed table. Returns: Type Description table | keyed table The table or keyed table sorted by the first non-key column, with the sorted attribute set on it if there is only one non-key column, otherwise the partitioned attribute set.","title":".tbl.sortAsc"},{"location":"tbl.html#tblsortascbycolumns","text":"Sort table in ascending order by given columns. See xasc . Parameters: Name Type Description table table | keyed table | symbol A table, keyed table, or table name. columns symbol | symbol[] Column name(s) of the table. Returns: Type Description table | keyed table | symbol The table sorted by the columns, if the table is passed by value, otherwise the table name itself where the sorting is in place. The sorted attribute is set on the first column.","title":".tbl.sortAscByColumns"}]}